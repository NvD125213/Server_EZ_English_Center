generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  full_name     String?
  email         String          @unique @default("")
  phone_number  String          @unique @default("")
  password      String          @default("")
  googleId      String?         @unique
  is_active     Boolean         @default(true)
  role          Int             @default(1)
  create_at     DateTime        @default(now())
  update_at     DateTime        @default(now()) @updatedAt
  blogs         Blog[]
  comments      Comment[]
  histories     History[]
  refreshTokens RefreshToken[]
  staffs        Staff[]
  students      Student[]
  teachers      Teacher[]
  UserVerifyOtp UserVerifyOtp[]
  answers       Answer[]

  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model UserVerifyOtp {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  createdAt DateTime @default(now())
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_verify_otps")
}

model Subject {
  id         Int       @id @default(autoincrement())
  name       String
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted_at DateTime?
  skillType  Int?      @default(1)
  exams      Exam[]

  @@map("subjects")
}

model Exam {
  id             Int             @id @default(autoincrement())
  subject_id     Int
  name           String
  create_at      DateTime        @default(now())
  update_at      DateTime        @updatedAt
  deleted_at     DateTime?
  comments       Comment[]
  examParts      ExamPart[]
  subject        Subject         @relation(fields: [subject_id], references: [id])
  histories      History[]
  questionGroups QuestionGroup[]
  answers        Answer[]

  @@map("exams")
}

model ExamPart {
  id      Int  @id @default(autoincrement())
  exam_id Int
  part_id Int
  exam    Exam @relation(fields: [exam_id], references: [id])
  part    Part @relation(fields: [part_id], references: [id])

  @@unique([exam_id, part_id])
  @@map("exam_parts")
}

model Part {
  id              Int             @id @default(autoincrement())
  name            String
  order           Int
  create_at       DateTime        @default(now())
  update_at       DateTime        @updatedAt
  deleted_at      DateTime?
  examParts       ExamPart[]
  question_groups QuestionGroup[]

  @@map("parts")
}

model QuestionGroup {
  id          Int        @id @default(autoincrement())
  type_group  Int        @default(1)
  part_id     Int
  order       Int
  title       String?
  description String?
  create_at   DateTime   @default(now())
  update_at   DateTime   @updatedAt
  deleted_at  DateTime?
  exam_id     Int
  elements    Element[]  @relation("GroupElements")
  exam        Exam       @relation(fields: [exam_id], references: [id])
  part        Part       @relation(fields: [part_id], references: [id])
  questions   Question[]

  @@index([part_id, exam_id])
  @@index([deleted_at])
  @@map("question_groups")
}

model Question {
  id             Int           @id @default(autoincrement())
  group_id       Int
  title          String?
  description    String?
  score          Int
  order          Int
  global_order   Int?
  correct_option Option?
  create_at      DateTime      @default(now())
  update_at      DateTime      @updatedAt
  deleted_at     DateTime?
  option         Json
  answers        Answer[]
  elements       Element[]     @relation("QuestionElements")
  group          QuestionGroup @relation(fields: [group_id], references: [id])

  @@index([group_id])
  @@index([deleted_at])
  @@map("questions")
}

model Element {
  id          Int            @id @default(autoincrement())
  type        TypeElement    @default(audio)
  url         String
  group_id    Int?
  question_id Int?
  cloudId     Boolean?       @default(false)
  group       QuestionGroup? @relation("GroupElements", fields: [group_id], references: [id])
  question    Question?      @relation("QuestionElements", fields: [question_id], references: [id])

  @@index([group_id])
  @@index([question_id])
  @@map("elements")
}

model Answer {
  id              Int       @id @default(autoincrement())
  question_id     Int
  user_id         Int // <-- NEW: để gán user trả lời này
  exam_id         Int // <-- NEW: để group theo bài thi
  selected_option String
  is_correct      Boolean // <-- có thể thêm để chấm điểm dễ hơn
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  question Question @relation(fields: [question_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])
  exam     Exam     @relation(fields: [exam_id], references: [id])

  @@index([question_id])
  @@index([user_id, exam_id])
  @@index([deleted_at])
  @@map("answers")
}

model History {
  id             Int       @id @default(autoincrement())
  user_id        Int
  exam_id        Int
  total_score    Int
  correct_answer Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  user User @relation(fields: [user_id], references: [id])
  exam Exam @relation(fields: [exam_id], references: [id])

  @@index([user_id, exam_id])
  @@index([deleted_at])
  @@map("histories")
}

model Menu {
  id         Int        @id @default(autoincrement())
  name       String
  sort       Int
  slug       String?
  status     MenuStatus
  parent_id  Int?
  create_at  DateTime   @default(now())
  update_at  DateTime   @updatedAt
  deleted_at DateTime?
  blogs      Blog[]
  courses    Course[]
  parent     Menu?      @relation("MenuToSubMenu", fields: [parent_id], references: [id])
  children   Menu[]     @relation("MenuToSubMenu")

  @@map("menus")
}

model Blog {
  id          Int        @id @default(autoincrement())
  user_id     Int
  menu_id     Int
  status      MenuStatus
  title       String?
  image_title String?
  description String?
  content     String
  view_count  Int        @default(0)
  create_at   DateTime   @default(now())
  update_at   DateTime   @updatedAt
  deleted_at  DateTime?
  menu        Menu       @relation(fields: [menu_id], references: [id])
  user        User       @relation(fields: [user_id], references: [id])

  @@map("blogs")
}

model Course {
  id            Int            @id @default(autoincrement())
  menu_id       Int
  lessons       Int
  term          Int
  level         Level
  price         Decimal        @db.Decimal(10, 2)
  currency      String         @default("VND") @db.VarChar(3)
  description   String
  create_at     DateTime       @default(now())
  update_at     DateTime       @updatedAt
  deleted_at    DateTime?
  classes       Class[]
  consultations Consultation[]
  menu          Menu           @relation(fields: [menu_id], references: [id])

  @@map("courses")
}

model Teacher {
  id          Int       @id @default(autoincrement())
  user_id     Int
  description String
  photo       String
  name        String
  email       String
  phone       String
  create_at   DateTime  @default(now())
  update_at   DateTime  @updatedAt
  deleted_at  DateTime?
  classes     Class[]
  user        User      @relation(fields: [user_id], references: [id])

  @@map("teachers")
}

model Staff {
  id         Int       @id @default(autoincrement())
  user_id    Int
  position   String
  photo      String
  name       String
  email      String
  phone      String
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted_at DateTime?
  payments   Payment[]
  user       User      @relation(fields: [user_id], references: [id])

  @@map("staffs")
}

model Class {
  id              Int              @id @default(autoincrement())
  teacher_id      Int
  course_id       Int
  address_id      Int
  name            String
  start_date      DateTime
  end_date        DateTime
  create_at       DateTime         @default(now())
  update_at       DateTime         @updatedAt
  deleted_at      DateTime?
  address         Address          @relation(fields: [address_id], references: [id])
  course          Course           @relation(fields: [course_id], references: [id])
  teacher         Teacher          @relation(fields: [teacher_id], references: [id])
  class_students  Class_Student[]
  payments        Payment[]
  class_schedules Class_Schedule[]

  @@map("classes")
}

model Class_Schedule {
  id         Int           @id @default(autoincrement())
  class_id   Int
  weekday_id Int
  class      Class         @relation(fields: [class_id], references: [id])
  weekday    Class_Weekday @relation(fields: [weekday_id], references: [id])

  @@map("class_schedules")
}

model Class_Weekday {
  id              Int              @id @default(autoincrement())
  week_day        Int
  start_time      String
  hours           Int
  create_at       DateTime         @default(now())
  update_at       DateTime         @updatedAt
  deleted_at      DateTime?
  class_schedules Class_Schedule[]

  @@map("class_weekdays")
}

model Student {
  id             Int             @id @default(autoincrement())
  user_id        Int
  birth          DateTime
  state          String
  city           String
  zip_code       String
  street         String
  name           String
  email          String
  phone          String
  create_at      DateTime        @default(now())
  update_at      DateTime        @updatedAt
  deleted_at     DateTime?
  class_students Class_Student[]
  payments       Payment[]
  user           User            @relation(fields: [user_id], references: [id])

  @@map("student")
}

model Class_Student {
  id         Int       @id @default(autoincrement())
  class_id   Int
  student_id Int
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted_at DateTime?
  class      Class     @relation(fields: [class_id], references: [id])
  student    Student   @relation(fields: [student_id], references: [id])

  @@map("class_students")
}

model Payment {
  id             Int           @id @default(autoincrement())
  student_id     Int
  staff_id       Int
  class_id       Int
  payment_date   DateTime
  amount         Decimal       @db.Decimal(10, 2)
  payment_method PaymentMethod
  status         PaymentStatus
  vnp_txn_ref    String?
  create_at      DateTime      @default(now())
  class          Class         @relation(fields: [class_id], references: [id])
  staff          Staff         @relation(fields: [staff_id], references: [id])
  student        Student       @relation(fields: [student_id], references: [id])

  @@map("payments")
}

model Consultation {
  id         Int       @id @default(autoincrement())
  course_id  Int
  name       String
  email      String
  phone      String
  create_at  DateTime  @default(now())
  deleted_at DateTime?
  course     Course    @relation(fields: [course_id], references: [id])

  @@map("consultations")
}

model Address {
  id         Int       @id @default(autoincrement())
  latitude   Float?
  longitude  Float?
  province   String
  district   String
  ward       String
  street     String
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted_at DateTime?
  Class      Class[]

  @@map("addresses")
}

model Comment {
  id         Int       @id @default(autoincrement())
  user_id    Int
  parent_id  Int?
  exam_id    Int
  content    String
  status     Boolean   @default(true)
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted_at DateTime?
  exam       Exam      @relation(fields: [exam_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@map("comments")
}

enum Option {
  A
  B
  C
  D
}

enum MenuStatus {
  Open
  Close
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum PaymentMethod {
  CASH    @map("Tiền mặt")
  BANKING @map("Banking")
}

enum PaymentStatus {
  PENDING   @map("Chờ xử lý")
  COMPLETED @map("Hoàn thành")
  REJECTED  @map("Từ chối")
  CANCELLED @map("Hủy giao dịch")
}

enum TypeElement {
  audio
  image
}
